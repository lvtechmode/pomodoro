{"version":3,"sources":["utils/useInterval/index.js","utils/duration/index.js","pomodoro/Focus.js","pomodoro/Break.js","pomodoro/Pomodoro.js","utils/class-names/index.js","App.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Focus","focusDuration","setFocusDuration","className","data-testid","type","onClick","Break","breakDuration","setBreakDuration","nextTick","prevState","timeRemaining","max","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","session","setSession","elapsed","setElapsed","aria","setAria","breakRemaining","setBreakRemaining","Audio","play","currentSession","label","nextSession","leftover","role","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","time","seconds","formatTime","style","display","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAIe,SAASA,EAAYC,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAKR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aALX,WACEL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,ICTC,SAASQ,EAAkBC,GAChC,IAAMC,EAAUC,KAAKC,MAAMH,GAAcI,WAAWC,SAAS,EAAG,KAChE,MAAM,GAAN,OAAUJ,EAAV,OCZF,IAyCeK,EAzCD,SAAC,GAGJ,IAFHC,EAEE,EAFFA,cACAC,EACE,EADFA,iBAIR,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,mCACb,0BAAMA,UAAU,mBAAmBC,cAAY,kBAE7C,0BAAMd,GAAG,eAAT,uBAAmD,0BAAMA,GAAG,kBAAkBG,EAAkBQ,KAElG,yBAAKE,UAAU,sBAEb,4BACEE,KAAK,SACLF,UAAU,oBACVC,cAAY,iBACZE,QAAS,WACHL,EAAgB,GAAGC,EAAiBD,EAAgB,KAG1D,0BAAME,UAAU,iBAGlB,4BACEE,KAAK,SACLF,UAAU,oBACVC,cAAY,iBACZE,QAAS,WACHL,EAAgB,IAAIC,EAAiBD,EAAgB,KAG3D,0BAAME,UAAU,oBCaTI,EA/CD,SAAC,GAGR,IAFLC,EAEI,EAFJA,cACAC,EACI,EADJA,iBAGA,OACF,yBAAKN,UAAU,OACL,yBAAKA,UAAU,eACb,yBAAKA,UAAU,mCACb,0BAAMA,UAAU,mBAAmBC,cAAY,kBAE7C,0BAAMd,GAAG,eAAT,uBAAmD,0BAAMA,GAAG,kBAAkBG,EAAkBe,KAElG,yBAAKL,UAAU,sBAEb,4BACEE,KAAK,SACLF,UAAU,oBACVC,cAAY,iBACZE,QAAS,WACHE,EAAgB,GAClBC,EAAiBD,EAAgB,KAIrC,0BAAML,UAAU,iBAGlB,4BACEE,KAAK,SACLF,UAAU,oBACVC,cAAY,iBACZE,QAAS,WACHE,EAAgB,IAClBC,EAAiBD,EAAgB,KAIrC,0BAAML,UAAU,qBCxBlC,SAASO,EAASC,GAChB,IAAMC,EAAgBhB,KAAKiB,IAAI,EAAGF,EAAUC,cAAgB,GAC5D,OAAO,2BACFD,GADL,IAEEC,kBAuNWE,MA9Kf,WAEE,IC9CiCC,ED8CjC,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGA,EAA0CN,mBAAS,IAAnD,mBAAOf,EAAP,KAAsBC,EAAtB,KACA,EAA0Cc,mBAAS,GAAnD,mBAAOR,EAAP,KAAsBC,EAAtB,KAIA,EAAwBO,mBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA4CR,mBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KAsEA,OA7DA3C,GAAY,WAER2C,EAAkBD,EAAiB,GACL,IAA1BN,EAAQP,gBACV,IAAIe,MAAM,gDAAgDC,OAC1DR,EA9CR,SAAqBnB,EAAeO,GAIlC,OAAO,SAACqB,GACN,MAA6B,aAAzBA,EAAeC,MACV,CACLA,MAAO,WACPlB,cAA+B,GAAhBJ,GAGZ,CACLsB,MAAO,WACPlB,cAA+B,GAAhBX,IAiCF8B,CAAY9B,EAAeO,KAExCY,EAAWV,GACX,IAAMsB,EAAWb,EAAQP,cACH,aAAlBO,EAAQW,MACVN,EAAS,KAAuB,GAAhBvB,EAAqB+B,IAA8B,GAAhB/B,IAEnDuB,EAAS,KAAuB,GAAhBhB,EAAqBwB,IAA8B,GAAhBxB,MAGvDS,EAAiB,IAAO,MAG1BlC,GAAY,WACV,GAAIoC,GAAWA,EAAQP,cACrB,OAAOU,EAAWD,EAAU,KAE7B,KAwCD,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACEF,cAAeA,EACfC,iBAAkBA,IAEpB,kBAAC,EAAD,CACEM,cAAeA,EACfC,iBAAkBA,KAIxB,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,yBACEA,UAAU,8BACV8B,KAAK,QACLC,aAAW,kBAEX,4BACE7B,KAAK,SACLF,UAAU,kBACVC,cAAY,aACZ+B,MAAM,uBACN7B,QA1DV,WACEY,GAAkB,SAACP,GACjB,IAAMyB,GAAazB,EAcnB,OAbIyB,GACFhB,GAAW,SAACiB,GAGV,OAAyB,OAArBA,EACK,CACLP,MAAO,WACPlB,cAA+B,GAAhBX,GAGZoC,KAGJD,OA4CD,0BACEjC,WC5JqBY,ED4JC,CACpBuB,IAAI,EACJ,iBAAkBrB,EAClB,iBAAkBA,GC9JzBsB,OAAOC,QAAQzB,GACnB0B,QACC,SAACC,EAAD,0BAAWvC,EAAX,KAAsBwC,EAAtB,YACED,EAAQE,OAAOD,EAAQxC,OAAY0C,KACrC,IAEDC,QAAO,SAAC3C,GAAD,YAA6B0C,IAAd1C,KACtB4C,KAAK,SD6JE,4BACE1C,KAAK,SACLF,UAAU,oBACVC,cAAY,OACZ+B,MAAM,mBACNa,UAAW/B,EACXX,QAAS,WACPc,EAAW,MACXF,GAAkB,GAClBI,EAAW,KAGb,0BAAMnB,UAAU,yBAKxB,6BAEGgB,GACC,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,OAEb,wBAAIC,cAAY,iBAtEJ,cAAZ,OAAPe,QAAO,IAAPA,OAAA,EAAAA,EAASW,OACJ,gBAAN,OAAuBrC,EAAkBQ,GAAzC,YAC4B,cAAZ,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASW,OACZ,gBAAN,OAAuBrC,EAAkBe,GAAzC,iBAEA,GAqEQ,uBAAGL,UAAU,OAAOC,cAAY,qBAC7Be,GA1LE,SAAC8B,GAClB,IAAItD,EAAUC,KAAKC,MAAMoD,EAAK,IAC1BC,EAAUD,EAAO,GAEvB,OACGtD,EAAU,GAAK,IAAMA,EAAUA,GAAW,KAC1CuD,EAAU,GAAK,IAAMA,EAAUA,GAoLNC,CAAWhC,EAAQP,eADjC,cAGA,wBAAIwC,MAAO,CAACC,QAAQ,GAAD,OAAKpC,EAAiB,OAAS,WAAlD,YAIJ,yBAAKd,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WAAWiD,MAAO,CAAEE,OAAQ,SACzC,yBACEnD,UAAU,eACV8B,KAAK,cACLsB,gBAAc,IACdC,gBAAc,MACdC,gBAAelC,EACf6B,MAAO,CAAEM,MAAM,GAAD,OAAKnC,EAAL,cEjNjBoC,MAbf,WACE,OACE,yBAAKxD,UAAU,OACb,4BAAQA,UAAU,wBAChB,+CAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCPRyD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f56b5933.chunk.js","sourcesContent":["// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import { minutesToDuration } from \"../utils/duration\";\nimport React from \"react\";\n\nconst Focus = ({ \n        focusDuration,\n        setFocusDuration,\n    }) => { \n\n\nreturn (\n  <div className=\"col\">\n  <div className=\"input-group input-group-lg mb-2\">\n    <span className=\"input-group-text\" data-testid=\"duration-focus\">\n      {/* Text to display the current focus session duration */}\n      <text id=\"focus-label\">Focus Duration:&nbsp;</text><text id=\"focus-duration\">{minutesToDuration(focusDuration)}</text>\n    </span>\n    <div className=\"input-group-append\">\n      {/* Decreasing focus duration and disable during a focus or break session */}\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary\"\n        data-testid=\"decrease-focus\"\n        onClick={() => {\n          if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n        }}\n      >\n        <span className=\"oi oi-minus\" />\n      </button>\n      {/* Increasing focus duration  and disable during a focus or break session */}\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary\"\n        data-testid=\"increase-focus\"\n        onClick={() => {\n          if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n        }}\n      >\n        <span className=\"oi oi-plus\" />\n      </button>\n    </div>\n  </div>\n</div>\n    )\n}\nexport default Focus;\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nconst Break = ({ \n  breakDuration,\n  setBreakDuration,\n}) => {\n\n  return(\n<div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* Text to display the current break session duration */}\n                <text id=\"break-label\">Break Duration:&nbsp;</text><text id=\"break-duration\">{minutesToDuration(breakDuration)}</text>\n              </span>\n              <div className=\"input-group-append\">\n                {/* Decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={() => {\n                    if (breakDuration > 1) {\n                      setBreakDuration(breakDuration - 1);\n                    }\n                  }}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* Increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={() => {\n                    if (breakDuration < 15) {\n                      setBreakDuration(breakDuration + 1);\n                    }\n                  }}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n  )\n}\n  \nexport default Break;\n      ","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break.js\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\nconst formatTime = (time) => {\n  let minutes = Math.floor(time/60);\n  let seconds = time % 60;\n\nreturn (\n  (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + \n  (seconds < 10 ? \"0\" + seconds : seconds)\n  );\n};\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0);\n\n  // Allows the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n\n  // Progress bar variables\n  const [aria, setAria] = useState(0);\n  const [breakRemaining, setBreakRemaining] = useState(0);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  // Progress bar logic\n  useInterval(() => {\n\n      setBreakRemaining(breakRemaining + 1);\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);\n      const leftover = session.timeRemaining;\n      if (session.label === \"Focusing\") {\n        setAria((100 * (focusDuration * 60 - leftover)) / (focusDuration * 60));\n      } else {\n        setAria((100 * (breakDuration * 60 - leftover)) / (breakDuration * 60));\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n\n  // Session Label\n  function staticSess() {\n    if(session?.label === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n    } else if (session?.label === \"On Break\"){\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`\n    } else {\n      return; \n    } \n  };\n\n \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus \n          focusDuration={focusDuration}\n          setFocusDuration={setFocusDuration}\n          />\n        <Break\n          breakDuration={breakDuration}\n          setBreakDuration={setBreakDuration}\n         />\n         </div>\n      \n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n              />\n            </button>\n            {/* Stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!isTimerRunning}\n              onClick={() => {\n                setSession(null);\n                setIsTimerRunning(false);\n                setElapsed(0);\n              }}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* Shows only when there is an active focus or break - i.e. the session is running or is paused */}\n        {session && (\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              {/* Message below includes current session (Focusing or On Break) total duration */}\n              <h2 data-testid=\"session-title\">\n                {staticSess()}\n              </h2>\n              {/* Message below correctly formats the time remaining in the current session */}\n              <p className=\"lead\" data-testid=\"session-sub-title\">\n                {session && formatTime(session.timeRemaining)} remaining\n              </p>\n              <h2 style={{display: `${isTimerRunning ? \"none\" : \"block\" }`}}>PAUSED</h2>\n            </div> \n          </div>\n        )}\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <div className=\"progress\" style={{ height: \"20px\" }}>\n                <div\n                  className=\"progress-bar\"\n                  role=\"progressbar\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  aria-valuenow={aria} // Increase of aria-valuenow as elapsed time increases\n                  style={{ width: `${aria}%` }} // Increase width % as elapsed time increases\n                />\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}