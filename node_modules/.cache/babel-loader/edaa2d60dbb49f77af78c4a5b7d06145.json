{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mslad\\\\OneDrive\\\\Desktop\\\\react_projects\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break.js\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nconst formatTime = time => {\n  let minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n  return (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n};\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0); // Allows the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5); // Progress bar variables\n\n  const [aria, setAria] = useState(0);\n  const [breakRemaining, setBreakRemaining] = useState(0);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  // Progress bar logic\n\n  useInterval(() => {\n    setBreakRemaining(breakRemaining + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const leftover = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAria(100 * (focusDuration * 60 - leftover) / (focusDuration * 60));\n    } else {\n      setAria(100 * (breakDuration * 60 - leftover) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null);\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  } // Session Label\n\n\n  function staticSess() {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`;\n    } else if ((session === null || session === void 0 ? void 0 : session.label) === \"On Break\") {\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`;\n    } else {\n      return;\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    disabled: !isTimerRunning,\n    onClick: () => {\n      setSession(null);\n      setIsTimerRunning(false);\n      setElapsed(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, session && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, staticSess()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, session && formatTime(session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      display: `${isTimerRunning ? \"none\" : \"block\"}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": aria // Increase of aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${aria}%`\n    } // Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/mslad/OneDrive/Desktop/react_projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","Focus","Break","nextTick","prevState","timeRemaining","Math","max","formatTime","time","minutes","floor","seconds","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","elapsed","setElapsed","setFocusDuration","setBreakDuration","aria","setAria","breakRemaining","setBreakRemaining","Audio","play","leftover","playPause","nextState","prevStateSession","staticSess","oi","display","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break.js\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\nconst formatTime = (time) => {\n  let minutes = Math.floor(time/60);\n  let seconds = time % 60;\n\nreturn (\n  (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + \n  (seconds < 10 ? \"0\" + seconds : seconds)\n  );\n};\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0);\n\n  // Allows the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n\n  // Progress bar variables\n  const [aria, setAria] = useState(0);\n  const [breakRemaining, setBreakRemaining] = useState(0);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  // Progress bar logic\n  useInterval(() => {\n\n      setBreakRemaining(breakRemaining + 1);\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);\n      const leftover = session.timeRemaining;\n      if (session.label === \"Focusing\") {\n        setAria((100 * (focusDuration * 60 - leftover)) / (focusDuration * 60));\n      } else {\n        setAria((100 * (breakDuration * 60 - leftover)) / (breakDuration * 60));\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n\n  // Session Label\n  function staticSess() {\n    if(session?.label === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n    } else if (session?.label === \"On Break\"){\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`\n    } else {\n      return; \n    } \n  };\n\n \n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus \n          focusDuration={focusDuration}\n          setFocusDuration={setFocusDuration}\n          />\n        <Break\n          breakDuration={breakDuration}\n          setBreakDuration={setBreakDuration}\n         />\n         </div>\n      \n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n              />\n            </button>\n            {/* Stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!isTimerRunning}\n              onClick={() => {\n                setSession(null);\n                setIsTimerRunning(false);\n                setElapsed(0);\n              }}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* Shows only when there is an active focus or break - i.e. the session is running or is paused */}\n        {session && (\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              {/* Message below includes current session (Focusing or On Break) total duration */}\n              <h2 data-testid=\"session-title\">\n                {staticSess()}\n              </h2>\n              {/* Message below correctly formats the time remaining in the current session */}\n              <p className=\"lead\" data-testid=\"session-sub-title\">\n                {session && formatTime(session.timeRemaining)} remaining\n              </p>\n              <h2 style={{display: `${isTimerRunning ? \"none\" : \"block\" }`}}>PAUSED</h2>\n            </div> \n          </div>\n        )}\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <div className=\"progress\" style={{ height: \"20px\" }}>\n                <div\n                  className=\"progress-bar\"\n                  role=\"progressbar\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  aria-valuenow={aria} // Increase of aria-valuenow as elapsed time increases\n                  style={{ width: `${aria}%` }} // Increase width % as elapsed time increases\n                />\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}