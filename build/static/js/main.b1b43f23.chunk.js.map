{"version":3,"sources":["utils/useInterval/index.js","utils/duration/index.js","pomodoro/Focus.js","pomodoro/Break.js","pomodoro/Session.js","pomodoro/Pomodoro.js","utils/class-names/index.js","App.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Focus","focusDuration","setFocusDuration","isTimerRunning","className","data-testid","type","disabled","onClick","Break","breakDuration","setBreakDuration","Session","session","formatTime","undefined","label","timeRemaining","style","display","nextTick","prevState","max","time","seconds","Pomodoro","classNameToBoolean","useState","setIsTimerRunning","setSession","elapsed","setElapsed","aria","setAria","breakRemaining","setBreakRemaining","Audio","play","currentSession","nextSession","leftover","role","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","filter","join","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1b43f23.chunk.js","sourcesContent":["// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import { minutesToDuration } from \"../utils/duration\";\nimport React from \"react\";\n\nconst Focus = ({ \n        focusDuration,\n        setFocusDuration,\n        isTimerRunning,\n    }) => { \n\n\nreturn (\n  <div className=\"col\">\n  <div className=\"input-group input-group-lg mb-2\">\n    <span className=\"input-group-text\" data-testid=\"duration-focus\">\n      {/* Text to display the current focus session duration */}\n      <text id=\"focus-label\">Focus Duration:&nbsp;</text><text id=\"focus-duration\">{minutesToDuration(focusDuration)}</text>\n    </span>\n    <div className=\"input-group-append\">\n      {/* Decreasing focus duration and disable during a focus or break session */}\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary\"\n        data-testid=\"decrease-focus\"\n        disabled={isTimerRunning}\n        onClick={() => {\n          if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n        }}\n      >\n        <span className=\"oi oi-minus\" />\n      </button>\n      {/* Increasing focus duration  and disable during a focus or break session */}\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary\"\n        data-testid=\"increase-focus\"\n        disabled={isTimerRunning}\n        onClick={() => {\n          if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n        }}\n      >\n        <span className=\"oi oi-plus\" />\n      </button>\n    </div>\n  </div>\n</div>\n    )\n}\nexport default Focus;\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nconst Break = ({ \n  breakDuration,\n  setBreakDuration,\n  isTimerRunning,\n}) => {\n\n  return(\n<div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* Text to display the current break session duration */}\n                <text id=\"break-label\">Break Duration:&nbsp;</text><text id=\"break-duration\">{minutesToDuration(breakDuration)}</text>\n              </span>\n              <div className=\"input-group-append\">\n                {/* Decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  disabled={isTimerRunning}\n                  onClick={() => {\n                    if (breakDuration > 1) {\n                      setBreakDuration(breakDuration - 1);\n                    }\n                  }}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* Increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  disabled={isTimerRunning}\n                  onClick={() => {\n                    if (breakDuration < 15) {\n                      setBreakDuration(breakDuration + 1);\n                    }\n                  }}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n  )\n}\n  \nexport default Break;\n      ","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nconst Session = ({\r\n  session,\r\n  breakDuration,\r\n  focusDuration,\r\n  isTimerRunning,\r\n  formatTime,\r\n}) => {\r\n  if (session === null) {\r\n    return null;\r\n  }\r\n\r\n  // Session Label\r\n  function staticSess() {\r\n    if (session !== undefined && session !== null) {\r\n      if (session.label === \"Focusing\") {\r\n        return `Focusing for ${minutesToDuration(focusDuration)} minutes`;\r\n      } else if (session.label === \"On Break\") {\r\n        return `On Break for ${minutesToDuration(breakDuration)} minutes`;\r\n      } else if (!isTimerRunning) {\r\n        return `${session.label}`;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* Message below includes current session (Focusing or On Break) total duration */}\r\n        <h2 data-testid=\"session-title\">{staticSess()}</h2>\r\n        {/* Message below correctly formats the time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {session && formatTime(session.timeRemaining)} remaining\r\n        </p>\r\n        <h2 style={{ display: `${isTimerRunning ? \"none\" : \"block\"}` }}>\r\n          PAUSE\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break.js\";\nimport Session from \"./Session\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\nconst formatTime = (time) => {\n  let minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  return (\n    (minutes < 10 ? \"0\" + minutes : minutes) +\n    \":\" +\n    (seconds < 10 ? \"0\" + seconds : seconds)\n  );\n};\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [elapsed, setElapsed] = useState(0);\n\n  // Allows the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  // Progress bar variables\n  const [aria, setAria] = useState(0);\n  const [breakRemaining, setBreakRemaining] = useState(0);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  // Progress bar logic\n  useInterval(\n    () => {\n      setBreakRemaining(breakRemaining + 1);\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);\n      const leftover = session.timeRemaining;\n      if (session.label === \"Focusing\") {\n        setAria((100 * (focusDuration * 60 - leftover)) / (focusDuration * 60));\n      } else {\n        setAria((100 * (breakDuration * 60 - leftover)) / (breakDuration * 60));\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function stopButton() {\n    if (session === \"Focusing\"){\n      return null;\n    }\n    if (session === \"On Break\"){\n      return null;\n    }\n    setSession(null);\n    setIsTimerRunning(false);\n    setElapsed(0);\n    setFocusDuration(25);\n    setBreakDuration(5);\n  }\n\n    return (\n   \n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus\n          focusDuration={focusDuration}\n          setFocusDuration={setFocusDuration}\n          isTimerRunning={isTimerRunning}\n        />\n        <Break\n          breakDuration={breakDuration}\n          setBreakDuration={setBreakDuration}\n          isTimerRunning={isTimerRunning}\n        />\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* Stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!isTimerRunning}\n              onClick={stopButton}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n      <Session\n          session={session}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          isTimerRunning={isTimerRunning}\n          formatTime={formatTime}\n        />\n          <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={aria} // Increase of aria-valuenow as elapsed time increases\n                style={{ width: `${aria}%` }} // Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}